// <auto-generated />
using System;
using MeusLegumes.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeusLegumes.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230404010604_CamposNullosDefinidosEmProdutos")]
    partial class CamposNullosDefinidosEmProdutos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("CODIGO_PEDIDO")
                .StartsAt(100L);

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Categorias.Entities.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Categorias", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Clientes.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Casa")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("MunicipioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NumeroContribuinte")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PontoDeReferencia")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Rua")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TelefoneAlternativo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TelefonePrincipal")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserIdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Enderecos.Entities.Municipio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("ProvinciaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Municipios", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Enderecos.Entities.Provincia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Provincias", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Impostos.Entities.Imposto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Taxa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoDeTaxa")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Impostos", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Impostos.Entities.MotivoIsencaoIva", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodigoInterno")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MencaoFactura")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NormaLegalAplicavel")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MotivosIsencaoIva", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Pedidos.Entities.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR CODIGO_PEDIDO");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<int>("PedidoStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Pedidos", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Pedidos.Entities.PedidoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProdutoNome")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("PedidoItensProduto", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Produtos.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("Destaque")
                        .HasColumnType("bit");

                    b.Property<bool>("EmEstoque")
                        .HasColumnType("bit");

                    b.Property<bool>("EmPromocao")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ImpostoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("MaisProcurado")
                        .HasColumnType("bit");

                    b.Property<bool>("MaisVendido")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MotivoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("NovoLancamento")
                        .HasColumnType("bit");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<decimal?>("PrecoPromocional")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<Guid?>("UnidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UrlImagemPrincipal")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("ImpostoId");

                    b.HasIndex("MotivoId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Produtos.Entities.ProdutoImagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UrlImagem")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoImagens", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Produtos.Entities.ProdutoRelacionado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProdutoRelacionadoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoRelacionados", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Unidades.Entities.Unidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Unidades", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Infrastructure.Identity.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Infrastructure.Identity.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Infrastructure.Identity.Models.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Clientes.Entities.Cliente", b =>
                {
                    b.HasOne("MeusLegumes.Domain.Contexts.Enderecos.Entities.Municipio", "Municipio")
                        .WithMany("Clientes")
                        .HasForeignKey("MunicipioId")
                        .IsRequired();

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Enderecos.Entities.Municipio", b =>
                {
                    b.HasOne("MeusLegumes.Domain.Contexts.Enderecos.Entities.Provincia", "Provincia")
                        .WithMany("Municipios")
                        .HasForeignKey("ProvinciaId")
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Pedidos.Entities.PedidoItem", b =>
                {
                    b.HasOne("MeusLegumes.Domain.Contexts.Pedidos.Entities.Pedido", "Pedido")
                        .WithMany("PedidoItens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Produtos.Entities.Produto", b =>
                {
                    b.HasOne("MeusLegumes.Domain.Contexts.Categorias.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("MeusLegumes.Domain.Contexts.Impostos.Entities.Imposto", "Imposto")
                        .WithMany("Produtos")
                        .HasForeignKey("ImpostoId");

                    b.HasOne("MeusLegumes.Domain.Contexts.Impostos.Entities.MotivoIsencaoIva", "MotivoIsencaoIva")
                        .WithMany("Produtos")
                        .HasForeignKey("MotivoId");

                    b.HasOne("MeusLegumes.Domain.Contexts.Unidades.Entities.Unidade", "Unidade")
                        .WithMany("Produtos")
                        .HasForeignKey("UnidadeId")
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Imposto");

                    b.Navigation("MotivoIsencaoIva");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Produtos.Entities.ProdutoImagem", b =>
                {
                    b.HasOne("MeusLegumes.Domain.Contexts.Produtos.Entities.Produto", "Produto")
                        .WithMany("ProdutosImagem")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Produtos.Entities.ProdutoRelacionado", b =>
                {
                    b.HasOne("MeusLegumes.Domain.Contexts.Produtos.Entities.Produto", "Produto")
                        .WithMany("ProdutosRelacionado")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("MeusLegumes.Infrastructure.Identity.Models.AppUserRole", b =>
                {
                    b.HasOne("MeusLegumes.Infrastructure.Identity.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeusLegumes.Infrastructure.Identity.Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MeusLegumes.Infrastructure.Identity.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MeusLegumes.Infrastructure.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MeusLegumes.Infrastructure.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MeusLegumes.Infrastructure.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Categorias.Entities.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Enderecos.Entities.Municipio", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Enderecos.Entities.Provincia", b =>
                {
                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Impostos.Entities.Imposto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Impostos.Entities.MotivoIsencaoIva", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Pedidos.Entities.Pedido", b =>
                {
                    b.Navigation("PedidoItens");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Produtos.Entities.Produto", b =>
                {
                    b.Navigation("ProdutosImagem");

                    b.Navigation("ProdutosRelacionado");
                });

            modelBuilder.Entity("MeusLegumes.Domain.Contexts.Unidades.Entities.Unidade", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("MeusLegumes.Infrastructure.Identity.Models.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MeusLegumes.Infrastructure.Identity.Models.AppUser", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
